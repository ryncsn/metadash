#!/usr/bin/env python3

import os
import sys
import glob
import subprocess

RED, GREEN, NC = '\033[0;31m', '\033[0;32m', '\033[0m'


def error(msg):
    print("{}{}{}".format(RED, msg, NC))


def info(msg):
    print("{}{}{}".format(GREEN, msg, NC))


def do_setup(dev=False, inst_py_dep=True, inst_node_dep=True, build_assert=True):
    try:
        if not (inst_py_dep or inst_node_dep or build_assert):
            error("*** There is nothing to do! ***")
            sys.exit(1)

        if inst_py_dep:
            info("*** Installing requirements of Metadash ... ***")
            subprocess.run(['pipenv', 'install'])
            if dev:
                subprocess.run(['pipenv', 'install', '--dev'])
            info("*** Installing requirements of Metadash Done ***")

            info("*** Installing requirements of Metadash Plugins ... ***")
            for filename in glob.iglob('metadash/plugins/*/requirements.txt'):
                subprocess.run(['pipenv', 'install', '-r', filename])
            if dev:
                for filename in glob.iglob('metadash/plugins/*/requirements.dev.txt'):
                    subprocess.run(['pipenv', 'install', '-r', filename])
            info("*** Installing requirements of Metadash Plugins Done ***")

        if inst_node_dep:
            info("*** Install node packages ***")
            if dev:
                subprocess.run(['npm', 'install'])
            else:
                subprocess.run(['npm', 'install', '--production'])
            info("*** Install node packages Done ***")

        if build_assert:
            info("*** Building Asserts ***")
            subprocess.run(['npm', 'run', 'build'])
            info("*** Building Asserts Done ***")

    except Exception as err:
        error("Failed with exception:")
        raise


if __name__ == '__main__':
    try:
        os.environ['APP_DEVELOPMENT'] = 'True'
        sys.path.insert(0, os.path.dirname(os.path.dirname(__file__)))

        import coloredlogs
        coloredlogs.install(level='INFO')

        # Load Flask
        from metadash import app, db  # noqa

        # Load Manager and Migration
        from flask_migrate import Migrate, MigrateCommand  # noqa
        from flask_script import Manager  # noqa

        migrate = Migrate(app, db)
        manager = Manager(app)
        manager.add_command('db', MigrateCommand)
    except ImportError:
        try:
            _script, cmd, *args = sys.argv
            if cmd == 'setup':
                dev, no_py, no_node, no_build = False, False, False, False
                for arg in args:
                    if arg in ('-d', '--develop'):
                        dev = True
                    elif arg in ('-p', '--no-py-dep'):
                        no_py = True
                    elif arg in ('-n', '--no-node-dep'):
                        no_node = True
                    elif arg in ('-b', '--no-build'):
                        no_build = True
                    else:
                        error('Unknown arg {}'.format(arg))
                do_setup(dev,
                         not no_py,
                         not no_node,
                         not no_build)
                sys.exit(0)
        except Exception:
            pass

        # Will reach here only if manager.py is called,
        # dependency not fully installed, and setup cmd is not given
        error('Failed with following exception, please '
              'make sure you have ran "%s setup" first!' % sys.argv[0])
        raise

    @manager.option('-d', '--develop', dest='dev', action='store_true')
    @manager.option('-p', '--no-py-dep', dest='no_py', action='store_true')
    @manager.option('-n', '--no-node-dep', dest='no_node', action='store_true')
    @manager.option('-b', '--no-build-assert', dest='no_build', action='store_true')
    @manager.command
    def setup(**kwargs):
        do_setup(kwargs['dev'],
                 not kwargs['no_py'],
                 not kwargs['no_node'],
                 not kwargs['no_build'])

    @manager.command
    @manager.option('-t', '--testcase', dest='testcase')
    def test_api(testcase=None):
        import unittest
        import os
        from metadash import plugins

        suite = unittest.TestSuite()
        loader = unittest.loader.defaultTestLoader

        if testcase:
            try:
                suite.addTests(loader.loadTestsFromName(testcase))
            except Exception:
                return "Unable to load given test case"
            else:
                pass
        else:
            suite.addTests(loader.loadTestsFromName("metadash.test.api"))

            for file in os.listdir('metadash/test/api'):
                if not file.startswith('_') and not file.startswith('.') and file.endswith('.py'):
                    suite.addTests(loader.loadTestsFromName("metadash.test.api.{}".format(file[:-3])))

            for plugin_name, plugin in plugins.get_all().items():
                try:
                    __import__(plugin['import'] + '.tests')
                except Exception:
                    error("Unable to load test case for plugin {}".format(plugin_name))
                else:
                    suite.addTests(loader.loadTestsFromName(plugin['import'] + '.tests'))

        runner = unittest.TextTestRunner()
        result = runner.run(suite)
        return len(result.errors + result.failures)

    @manager.command
    @manager.option('-n', '--username', dest='username')
    @manager.option('-p', '--password', dest='password')
    @manager.option('-r', '--role', dest='role')
    def create_user(username=None, password=None, role="admin"):
        """
        Create or overlay a user with local authentication
        """
        if username and password:
            from metadash.auth import user_signup, user_setrole
            user_signup(username, password, 'local')
            user_setrole(username, role)
        else:
            raise "Username and password required"

    @manager.command
    def create_database():
        with app.app_context():
            db.create_all()

    manager.run()
